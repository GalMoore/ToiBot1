// Generated by gencpp from file motors/motorsCommand.msg
// DO NOT EDIT!


#ifndef MOTORS_MESSAGE_MOTORSCOMMAND_H
#define MOTORS_MESSAGE_MOTORSCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motors
{
template <class ContainerAllocator>
struct motorsCommand_
{
  typedef motorsCommand_<ContainerAllocator> Type;

  motorsCommand_()
    : deltaX(0)
    , deltaY(0)
    , faceArea(0)
    , setnence()  {
    }
  motorsCommand_(const ContainerAllocator& _alloc)
    : deltaX(0)
    , deltaY(0)
    , faceArea(0)
    , setnence(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _deltaX_type;
  _deltaX_type deltaX;

   typedef int32_t _deltaY_type;
  _deltaY_type deltaY;

   typedef int32_t _faceArea_type;
  _faceArea_type faceArea;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _setnence_type;
  _setnence_type setnence;





  typedef boost::shared_ptr< ::motors::motorsCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motors::motorsCommand_<ContainerAllocator> const> ConstPtr;

}; // struct motorsCommand_

typedef ::motors::motorsCommand_<std::allocator<void> > motorsCommand;

typedef boost::shared_ptr< ::motors::motorsCommand > motorsCommandPtr;
typedef boost::shared_ptr< ::motors::motorsCommand const> motorsCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motors::motorsCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motors::motorsCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motors

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'motors': ['/home/intel/toibot_ws/src/ToiBot1/src/motors/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motors::motorsCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motors::motorsCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motors::motorsCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motors::motorsCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motors::motorsCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motors::motorsCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motors::motorsCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9eec707e4d0b5f449400290d53d427d";
  }

  static const char* value(const ::motors::motorsCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9eec707e4d0b5f4ULL;
  static const uint64_t static_value2 = 0x49400290d53d427dULL;
};

template<class ContainerAllocator>
struct DataType< ::motors::motorsCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motors/motorsCommand";
  }

  static const char* value(const ::motors::motorsCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motors::motorsCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 deltaX\n\
int32 deltaY\n\
int32 faceArea\n\
string setnence\n\
\n\
";
  }

  static const char* value(const ::motors::motorsCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motors::motorsCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.deltaX);
      stream.next(m.deltaY);
      stream.next(m.faceArea);
      stream.next(m.setnence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motorsCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motors::motorsCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motors::motorsCommand_<ContainerAllocator>& v)
  {
    s << indent << "deltaX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltaX);
    s << indent << "deltaY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltaY);
    s << indent << "faceArea: ";
    Printer<int32_t>::stream(s, indent + "  ", v.faceArea);
    s << indent << "setnence: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.setnence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTORS_MESSAGE_MOTORSCOMMAND_H
