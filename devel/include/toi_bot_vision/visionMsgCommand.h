// Generated by gencpp from file toi_bot_vision/visionMsgCommand.msg
// DO NOT EDIT!


#ifndef TOI_BOT_VISION_MESSAGE_VISIONMSGCOMMAND_H
#define TOI_BOT_VISION_MESSAGE_VISIONMSGCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace toi_bot_vision
{
template <class ContainerAllocator>
struct visionMsgCommand_
{
  typedef visionMsgCommand_<ContainerAllocator> Type;

  visionMsgCommand_()
    : visionStateCommand(0)
    , personName()  {
    }
  visionMsgCommand_(const ContainerAllocator& _alloc)
    : visionStateCommand(0)
    , personName(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _visionStateCommand_type;
  _visionStateCommand_type visionStateCommand;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _personName_type;
  _personName_type personName;





  typedef boost::shared_ptr< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> const> ConstPtr;

}; // struct visionMsgCommand_

typedef ::toi_bot_vision::visionMsgCommand_<std::allocator<void> > visionMsgCommand;

typedef boost::shared_ptr< ::toi_bot_vision::visionMsgCommand > visionMsgCommandPtr;
typedef boost::shared_ptr< ::toi_bot_vision::visionMsgCommand const> visionMsgCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace toi_bot_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'toi_bot_vision': ['/home/intel/toibot_ws/src/ToiBot1/src/toi_bot_vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69b80dd6addeec87f2c5298e187d1d3a";
  }

  static const char* value(const ::toi_bot_vision::visionMsgCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69b80dd6addeec87ULL;
  static const uint64_t static_value2 = 0xf2c5298e187d1d3aULL;
};

template<class ContainerAllocator>
struct DataType< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "toi_bot_vision/visionMsgCommand";
  }

  static const char* value(const ::toi_bot_vision::visionMsgCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 visionStateCommand\n\
\n\
string personName\n\
";
  }

  static const char* value(const ::toi_bot_vision::visionMsgCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.visionStateCommand);
      stream.next(m.personName);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct visionMsgCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::toi_bot_vision::visionMsgCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::toi_bot_vision::visionMsgCommand_<ContainerAllocator>& v)
  {
    s << indent << "visionStateCommand: ";
    Printer<int8_t>::stream(s, indent + "  ", v.visionStateCommand);
    s << indent << "personName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.personName);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOI_BOT_VISION_MESSAGE_VISIONMSGCOMMAND_H
