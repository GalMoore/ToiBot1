// Generated by gencpp from file toi_bot_vision/visionMsgOutput.msg
// DO NOT EDIT!


#ifndef TOI_BOT_VISION_MESSAGE_VISIONMSGOUTPUT_H
#define TOI_BOT_VISION_MESSAGE_VISIONMSGOUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace toi_bot_vision
{
template <class ContainerAllocator>
struct visionMsgOutput_
{
  typedef visionMsgOutput_<ContainerAllocator> Type;

  visionMsgOutput_()
    : name()
    , detectFace(false)
    , deltaX(0)
    , deltaY(0)
    , canRecognize(false)
    , emotion()
    , faceArea(0)  {
    }
  visionMsgOutput_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , detectFace(false)
    , deltaX(0)
    , deltaY(0)
    , canRecognize(false)
    , emotion(_alloc)
    , faceArea(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _detectFace_type;
  _detectFace_type detectFace;

   typedef int32_t _deltaX_type;
  _deltaX_type deltaX;

   typedef int32_t _deltaY_type;
  _deltaY_type deltaY;

   typedef uint8_t _canRecognize_type;
  _canRecognize_type canRecognize;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emotion_type;
  _emotion_type emotion;

   typedef int32_t _faceArea_type;
  _faceArea_type faceArea;





  typedef boost::shared_ptr< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> const> ConstPtr;

}; // struct visionMsgOutput_

typedef ::toi_bot_vision::visionMsgOutput_<std::allocator<void> > visionMsgOutput;

typedef boost::shared_ptr< ::toi_bot_vision::visionMsgOutput > visionMsgOutputPtr;
typedef boost::shared_ptr< ::toi_bot_vision::visionMsgOutput const> visionMsgOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace toi_bot_vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'toi_bot_vision': ['/home/intel/toibot_ws/src/ToiBot1/src/toi_bot_vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffb96e74b49c6230c375e2b578de77a4";
  }

  static const char* value(const ::toi_bot_vision::visionMsgOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffb96e74b49c6230ULL;
  static const uint64_t static_value2 = 0xc375e2b578de77a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "toi_bot_vision/visionMsgOutput";
  }

  static const char* value(const ::toi_bot_vision::visionMsgOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string name\n\
bool detectFace\n\
int32 deltaX\n\
int32 deltaY\n\
bool canRecognize\n\
string emotion\n\
int32 faceArea\n\
";
  }

  static const char* value(const ::toi_bot_vision::visionMsgOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.detectFace);
      stream.next(m.deltaX);
      stream.next(m.deltaY);
      stream.next(m.canRecognize);
      stream.next(m.emotion);
      stream.next(m.faceArea);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct visionMsgOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::toi_bot_vision::visionMsgOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::toi_bot_vision::visionMsgOutput_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "detectFace: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detectFace);
    s << indent << "deltaX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltaX);
    s << indent << "deltaY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.deltaY);
    s << indent << "canRecognize: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.canRecognize);
    s << indent << "emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emotion);
    s << indent << "faceArea: ";
    Printer<int32_t>::stream(s, indent + "  ", v.faceArea);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOI_BOT_VISION_MESSAGE_VISIONMSGOUTPUT_H
