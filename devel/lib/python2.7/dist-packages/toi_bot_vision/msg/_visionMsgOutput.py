# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from toi_bot_vision/visionMsgOutput.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class visionMsgOutput(genpy.Message):
  _md5sum = "ffb96e74b49c6230c375e2b578de77a4"
  _type = "toi_bot_vision/visionMsgOutput"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
string name
bool detectFace
int32 deltaX
int32 deltaY
bool canRecognize
string emotion
int32 faceArea
"""
  __slots__ = ['name','detectFace','deltaX','deltaY','canRecognize','emotion','faceArea']
  _slot_types = ['string','bool','int32','int32','bool','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,detectFace,deltaX,deltaY,canRecognize,emotion,faceArea

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(visionMsgOutput, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.detectFace is None:
        self.detectFace = False
      if self.deltaX is None:
        self.deltaX = 0
      if self.deltaY is None:
        self.deltaY = 0
      if self.canRecognize is None:
        self.canRecognize = False
      if self.emotion is None:
        self.emotion = ''
      if self.faceArea is None:
        self.faceArea = 0
    else:
      self.name = ''
      self.detectFace = False
      self.deltaX = 0
      self.deltaY = 0
      self.canRecognize = False
      self.emotion = ''
      self.faceArea = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2iB().pack(_x.detectFace, _x.deltaX, _x.deltaY, _x.canRecognize))
      _x = self.emotion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.faceArea))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.detectFace, _x.deltaX, _x.deltaY, _x.canRecognize,) = _get_struct_B2iB().unpack(str[start:end])
      self.detectFace = bool(self.detectFace)
      self.canRecognize = bool(self.canRecognize)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emotion = str[start:end].decode('utf-8')
      else:
        self.emotion = str[start:end]
      start = end
      end += 4
      (self.faceArea,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2iB().pack(_x.detectFace, _x.deltaX, _x.deltaY, _x.canRecognize))
      _x = self.emotion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_i().pack(self.faceArea))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.detectFace, _x.deltaX, _x.deltaY, _x.canRecognize,) = _get_struct_B2iB().unpack(str[start:end])
      self.detectFace = bool(self.detectFace)
      self.canRecognize = bool(self.canRecognize)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emotion = str[start:end].decode('utf-8')
      else:
        self.emotion = str[start:end]
      start = end
      end += 4
      (self.faceArea,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_B2iB = None
def _get_struct_B2iB():
    global _struct_B2iB
    if _struct_B2iB is None:
        _struct_B2iB = struct.Struct("<B2iB")
    return _struct_B2iB
